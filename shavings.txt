Only need this for the admin routes: 
//Token middleware:
require("dotenv").config();
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT || "shhh";


I don't think I need an admin registration function: 
// Admin registration
apiRouter.post("/api/auth/register", async (req, res, next) => {
  try {
    res.send(await createUser(req.body));
  } catch (ex) {
    next(ex);
  }
});
//Simpler Piece Grab: 
const getAllPieces = async () => {
  const SQL = `
    SELECT id 
    FROM pieces;
  `;

  const response = await client.query(SQL);
  return response.rows;
};



A more complex getAllAdmin request (there was no message so I didn't use it):
// apiRouter.get("/", async (req, res, next) => {
//   try {
//     const users = await getAllAdmins();

//     res.send({
//       admins,
//     });
//   } catch ({ name, message }) {
//     next({ name, message });
//   }
// });

WHERE "tagId" = (SELECT tags.id FROM tags WHERE tags.medium = $1)

A more complex Register request (I only have admins and I'll provide the info for grading):
apiRouter.post("/register", async (req, res, next) => {
  const { username, password, name, location } = req.body;

  try {
    const _user = await getUserByUsername(username);

    if (_user) {
      next({
        name: "UserExistsError",
        message: "A admin by that username already exists",
      });
    }

    const admin = await createUser({
      username,
      password,
      name,
      location,
    });

    const token = jwt.sign(
      {
        id: admin.id,
        username,
      },
      JWT_SECRET,
      {
        expiresIn: "1w",
      }
    );

    res.send({
      message: "thank you for signing up",
      token,
    });
  } catch ({ name, message }) {
    next({ name, message });
  }
});

Deleting unnecessary middleware:
[
// Middleware for printing information + errors:
apiRouter.use(require("morgan")("dev"));
// Importing findUserWithToken to build the admin requests:
const { findUserWithToken } = require("../db/db.js");

const requireUser = async (req, res, next) => {
  try {
    req.user = await findUserWithToken(req.headers.authorization);
    next();
  } catch (ex) {
    next(ex);
  }
};
//Information for deployment:
//Static route
const path = require("node:path");
apiRouter.use(express.static(path.join(__dirname, "../client/dist")));
//GET endpoint to render static HTML

apiRouter.get("/", (req, res) =>
  res.sendFile(path.join(__dirname, "../client/dist/index.html"))
);
]



Removing pieces from the db/seed test: 
//Removing change tests
  console.log("Calling updateUser on users[0]");
    const updateUserResult = await updateUser(users[0].id, {
      name: "Newname Sogood",
      location: "Lesterville, KY",
    });
    console.log("Result:", updateUserResult);

    console.log("Calling updatePost on posts[0]");
    const updatePostResult = await updatePost(posts[0].id, {
      title: "New Title",
      content: "Updated Content",
    });
    console.log("Result:", updatePostResult);

    console.log("Calling updatePost on posts[1], only updating tags");
    const updatePostTagsResult = await updatePost(posts[1].id, {
      tags: ["#youcandoanything", "#redfish", "#bluefish"],
    });
    console.log("Result:", updatePostTagsResult);






The entire db/seed test original setup (for reference): 
// Function for testing all database connections:
async function testDB() {
  try {
    console.log("Starting to test database...");

    console.log("Calling getAllUsers");
    const users = await getAllUsers();
    console.log("Result:", users);

    console.log("Calling updateUser on users[0]");
    const updateUserResult = await updateUser(users[0].id, {
      name: "Newname Sogood",
      location: "Lesterville, KY",
    });
    console.log("Result:", updateUserResult);

    console.log("Calling getAllPosts");
    const posts = await getAllPosts();
    console.log("Result:", posts);

    console.log("Calling updatePost on posts[0]");
    const updatePostResult = await updatePost(posts[0].id, {
      title: "New Title",
      content: "Updated Content",
    });
    console.log("Result:", updatePostResult);

    console.log("Calling updatePost on posts[1], only updating tags");
    const updatePostTagsResult = await updatePost(posts[1].id, {
      tags: ["#youcandoanything", "#redfish", "#bluefish"],
    });
    console.log("Result:", updatePostTagsResult);

    console.log("Calling getUserById with 1");
    const albert = await getUserById(1);
    console.log("Result:", albert);

    console.log("Calling getAllTags");
    const allTags = await getAllTags();
    console.log("Result:", allTags);

    console.log("Calling getPostsByTagName with #happy");
    const postsWithHappy = await getPostsByTagName("#happy");
    console.log("Result:", postsWithHappy);

    console.log("Finished database tests!");
  } catch (error) {
    console.log("Error during testDB");
    throw error;
  }
}

// Promise methods for the database rebuild:
rebuildDB()
  .then(testDB)
  .catch(console.error)
  .finally(() => client.end());