If you're struggling to find the relative file path. You can use the command line to 
find file paths (zsh):
find . -name 'Button.jsx'

For Northflank deploys, you'll need an advanced build command: 
npm start --workspace=server
For the seed job you'll need an advanced build command as well:
npm --workspace=server run seed

Very cool image attribute I didn't know existed:
onLoad={() => setImageLoaded(true)}

Scroll Function Designed for Project Routes only: 
import { useEffect } from "react";
import { useLocation } from "react-router-dom";
import { projectsRoutes } from "./components/Projects/index.js";

/** Utillity Component for Overriding the React Router Default Page
 * Location (Changes Default to the top of the page)
 */
const ScrollToTop = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    const isProjectRoute = projectsRoutes.some((project) =>
      pathname.startsWith(project.route)
    );

    // Only scroll on project routes
    if (!isProjectRoute) return;
    // Delay the scroll to ensure the new component has mounted
    requestAnimationFrame(() => {
      // The actual scroll feature (set to 80px from the actual top of the pg)
      window.scrollTo({ top: 80, left: 0, behavior: "smooth" });
    });
  }, [pathname]);

  return null;
};

export default ScrollToTop;


For Adding Hyperlinks for Photos from Dropbox:
-Use Dropbox
-Copy the "share" link
-Put that share link into a browser where you're NOT signed into Dropbox
(ex. Signed in on Chrome...copy the link to Mozilla)
-Open the image in a new tab, and copy the URL from the top of the page
-If you just grab the "copy image address" from the picture inside the Dropbox
website (even in a broswer where you're not signed in), it won't work.
-You should end up with a URL that has a set of #s and letters IN FRONT of the
Dropbox location. That's the link you need! If the Dropbox location comes first,
the link won't work.

For when I need to add more pics,projects, or project pics and don't want to recopy the set-up:
await createArtPiece({
      authorId: laiyoung.id,
      title: "",
      date: "",
      image_url: "",
      description: "",
      tags: ["", ""],
    });
await createProjectPhoto({
      title: "",
      projectId: 2,
      image_url: "" ,
    });
await createProject({
      title:
        "",
      location: "",
      role: "",
      thumbnail: "",
      blurb:
        "",
        markers: [
          { title: "", type: "" },
          { title: "", type: "" },
          { title: "", type: "" },
          { title: "", type: "" },
          { title: "", type: "" },
        ],
    });

For Deployment, you'll need to change the script set up, so that you're only running 
1 script, not 2:
* concurrently is a framework to do that. Make sure you change the default scripts to
match the 1s you already have!!

npm  install concurrently 

"scripts": {
    "frontend": "cd client && npm run dev",
    "backend": "nodemon server",
    "seed": "node ./server/db/seed.js",
    "dev": "concurrently \"npm run backend\" \"npm run frontend\""
  },


2 Different "Close Details" Buttons:
-Button on the bottom w/ text:
{(.......)}
         <button style={{ margin: "10px" }} onClick={handleClose}>
           Close Details
         </button>
       </div>
     </div>
-Button at the top as a universal symbol:
     <div className="details">
         <button
           style={{ margin: "2px", fontWeight: "bold", marginLeft: "auto" }}
           onClick={handleClose}
         >
           &#x2715;
         </button>

Playing with navigation CSS:
.navigation {
  position: relative;
  display: none;
  position: absolute;
  background-color: #f1f1f1;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
  right: 0; 
}

Old CSS from Book Buddy:
.article {
  display: flex;
  flex-flow: row wrap-reverse;
  justify-content: space-evenly;
  gap: 10px;
}

.player-card {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border: 2px solid rgb(3, 5, 103);
  border-radius: 10px;
  width: 300px;
  padding: 0 15px 15px;
  margin: 0 10px 10px 0;
}

.single-card-view {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border: 2px solid rgb(43, 2, 58);
  border-radius: 10px;
  width: 300px;
  padding: 0 15px 15px;
  margin: 0 10px 10px 0;
  background-color: rgb(229, 208, 251);
}

A useful ternary I didn't need:
{/* {!token ? (
        <></>
      ) : (
        <div>
          <button onClick={handleDelete}> Delete </button>
          <button onClick={handleEdit}> Edit Art Piece</button>
        </div>
      )} */}

THESE TAGS ARE THE CURRENT BANE OF MY EXISTENCE!!!: 
A way to check for tags:
{tags && tags.map((tag) => <ul key={tag.id}>{tag.medium}</ul>)}

Trying to make sure this tags array is never null or undefined:
setTags(result.tags || []); --> this wasn't strong enough

if (result.tags) {
        result.tags = result.tags.split(", ");
      } else {
        result.tags = [];
      }

Getting pieces useEffect:
 useEffect(() => {
    async function fetchPieces() {
      const response = await fetch(`${API_URL}/pieces`);
      const allPieceData = await response.json();
      setPieces(allPieceData);
      // console.log(allPieceData);
    }
    fetchPieces();
  }, [pieces.length]);

Another GET all pieces useEffect:
  async function fetchPieces() {
    const response = await fetch(`${API_URL}/pieces`);
    const allPieceData = await response.json();
    setPieces(allPieceData);
    // console.log(allPieceData);
  }

Default items for editing:
 title: originalPiece.title,
 date: originalPiece.date,
 image_url: originalPiece.image_url,
 description: originalPiece.description,
 tags: originalPiece.tags,

Another delete handler:
  // async function handleDelete() {
  //   await deletePlayer(piece.id);
  //   // location.reload();
  //   fetchPieces();
  // }

Getting Details Setup:
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getSingleBook } from "../api";

export default function BookDetails() {
  const [bookDetails, setBookDetails] = useState({});
  const { id } = useParams();
  const navigate = useNavigate();

  useEffect(() => {
    async function getBookDetails(id) {
      setBookDetails(await getSingleBook(id));
    }
    getBookDetails(id);
  }, []);

  return (
    <>
      <div className="single-card-view">
        <h3>{bookDetails.title}</h3>
        <h4> By: {bookDetails.author}</h4>
        <img src={bookDetails.coverimage} alt={bookDetails.title} />
        {bookDetails.available ? (
          <p className="available">Available to Borrow</p>
        ) : (
          <p className="checked-out">Checked Out</p>
        )}
        <h4> Description: </h4>
        <p>{bookDetails.description} </p>
        <button
          onClick={() => {
            navigate("/");
          }}
        >
          Close Description
        </button>
      </div>
    </>
  );
}


Only need this for the admin routes: 
//Token middleware:
require("dotenv").config();
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT || "shhh";

//This is a statement to make sure tags are attached to pieces when they're returned
//The Promise.all batches the calls necessary to make the map
 await Promise.all(pieceIds.map((piece) => getPieceById(piece.id)));


I don't think I need an admin registration function: 
// Admin registration
apiRouter.post("/api/auth/register", async (req, res, next) => {
  try {
    res.send(await createUser(req.body));
  } catch (ex) {
    next(ex);
  }
});
//Simpler Piece Grab: 
const getAllPieces = async () => {
  const SQL = `
    SELECT id 
    FROM pieces;
  `;

  const response = await client.query(SQL);
  return response.rows;
};

Trying to fix the patch and failing:
async function updateArtPiece(pieceId, fields = {}) {
  // Extract tags and remove that field from fields
  const { tags } = fields;
  console.log(fields);
  delete fields.tags;

  // Build the SET string for the update query using parameterized queries
  const setKeys = Object.keys(fields);
  const setValues = Object.values(fields);

  // Check if there are fields to update
  if (setKeys.length > 0) {
    const setString = setKeys
      .map((key, index) => `"${key}"=$${index + 1}`)
      .join(", ");

    try {
      // Update fields in the database
      await client.query(
        `
        UPDATE pieces
        SET ${setString}
        WHERE id=$${setKeys.length + 1}
        RETURNING *;
        `,
        [...setValues, pieceId] // Use pieceId as the last parameter
      );
    } catch (error) {
      throw new Error("Error updating art piece fields:", error);
    }
  }

  // Return early if there are no tags to update
  if (!tags) {
    return await getPieceById(pieceId);
  }

  // Make any new tags that need to be created
  const tagList = await createTags(tags);
  // console.log(tagList);
  if (tagList) {
    // Join tag IDs into a string for the DELETE query
    const tagListIdString = tagList.map((tag) => `${tag.id}`).join(", ");
    console.log(tagListIdString);
    
    try {
      // Delete any piece_tags that are not in the tagList
      await client.query(
        `
        DELETE FROM piece_tags
        WHERE "tagId" NOT IN (${tagListIdString})
        AND "pieceId"=$1;
        `,
        [pieceId]
      );
  
      // Add the new tags to the piece
      await addTagsToPiece(pieceId, tagList);
  
      return await getPieceById(pieceId);
    } catch (error) {
      throw new Error("Error updating tags for art piece:", error);
    }

  }
  
}

// Fetch Pieces by TagName (testDB function):
async function getPiecesByTagName(tagName) {
  try {
    const pieceIds = await client.query(
      `
      SELECT *
      FROM piece_tags
      WHERE "tagId"=(SELECT tags.id FROM tags WHERE tags.medium=$1);
    `,
      [tagName]
    );

    return pieceIds.rows;

  } catch (error) {
    throw error;
  }
}
--VS--

 try {
    const { rows: pieceIds } = await client.query(`
      SELECT *
      FROM piece_tags
      WHERE "tagId"=(SELECT tags.id FROM tags WHERE tags.medium=$1);
    `,
      [tagName]
    );

    // using getPieceById here allows you to grab the tags along with the piece info
    // the Promise.all batches the calls necessary to make the map
    const pieces = await Promise.all(
      pieceIds.map((piece) => getPieceById(piece.id))
    );

    return pieces;

  } catch (error) {
    throw error;
  }

Changing out how a piece is grabbed:
await client.query(
      `SELECT * FROM pieces WHERE id = $1;`,
      [pieceId]
    );

A more complex getAllAdmin request (there was no message so I didn't use it):
// apiRouter.get("/", async (req, res, next) => {
//   try {
//     const users = await getAllAdmins();

//     res.send({
//       admins,
//     });
//   } catch ({ name, message }) {
//     next({ name, message });
//   }
// });

WHERE "tagId" = (SELECT tags.id FROM tags WHERE tags.medium = $1)

A more complex Register request (I only have admins and I'll provide the info for grading):
apiRouter.post("/register", async (req, res, next) => {
  const { username, password, name, location } = req.body;

  try {
    const _user = await getUserByUsername(username);

    if (_user) {
      next({
        name: "UserExistsError",
        message: "A admin by that username already exists",
      });
    }

    const admin = await createUser({
      username,
      password,
      name,
      location,
    });

    const token = jwt.sign(
      {
        id: admin.id,
        username,
      },
      JWT_SECRET,
      {
        expiresIn: "1w",
      }
    );

    res.send({
      message: "thank you for signing up",
      token,
    });
  } catch ({ name, message }) {
    next({ name, message });
  }
});

Deleting unnecessary middleware:
[
// Middleware for printing information + errors:
apiRouter.use(require("morgan")("dev"));
// Importing findUserWithToken to build the admin requests:
const { findUserWithToken } = require("../db/db.js");

const requireUser = async (req, res, next) => {
  try {
    req.user = await findUserWithToken(req.headers.authorization);
    next();
  } catch (ex) {
    next(ex);
  }
};
//Information for deployment:
//Static route
const path = require("node:path");
apiRouter.use(express.static(path.join(__dirname, "../client/dist")));
//GET endpoint to render static HTML

apiRouter.get("/", (req, res) =>
  res.sendFile(path.join(__dirname, "../client/dist/index.html"))
);
]

Semi-Working Patch attempt:
apiRouter.patch('/:pieceId', requireAuth, async (req, res, next) => {
  const { pieceId } = req.params;
  console.log(req.body);
  try {
    // Fetch current piece information
    const currentPieceInfo = await client.query(
      `SELECT * FROM pieces WHERE id = $1;`,
      [pieceId]
    );
    
    const singlePiece = currentPieceInfo.rows[0];
    if (!singlePiece) {
      return next({
        name: "PieceNotFoundError",
        message: "No piece found with that ID."
      });
    }
    // Destructure new values from req.body, falling back to existing values
    const {
      title = singlePiece.title,
      date = singlePiece.date,
      image_url = singlePiece.image_url,
      description = singlePiece.description,
      tags: newTags // new tags from request
    } = req.body;
    // Create updatedPiece based on the current piece
    let updatedPiece = { ...singlePiece };
    // Merge tags if new tags are provided
    if (newTags) {
      // Initialize an array for existing tags, whether stored as array or comma-separated string
      let existingTagsArray = [];
      if (singlePiece.tags) {
        if (Array.isArray(singlePiece.tags)) {
          existingTagsArray = singlePiece.tags;
        } else if (typeof singlePiece.tags === 'string') {
          existingTagsArray = singlePiece.tags.split(',').map(tag => tag.trim());
        }
      }
      // Convert new tags into an array
      let newTagsArray = [];
      if (typeof newTags === 'string') {
        newTagsArray = newTags.split(',').map(tag => tag.trim());
      } else if (Array.isArray(newTags)) {
        newTagsArray = newTags;
      }
      // Merge arrays and remove duplicates
      const mergedTags = Array.from(new Set([...existingTagsArray, ...newTagsArray]));
      // Set the merged tags as an array
      updatedPiece.tags = mergedTags;
    }
    // Update other fields from request, if provided
    updatedPiece.title = title;
    updatedPiece.date = date;
    updatedPiece.image_url = image_url;
    updatedPiece.description = description;
    // Update the database record with the merged data
    const dbUpdate = await client.query(
      `UPDATE pieces
       SET title = $1, date = $2, image_url = $3, description = $4, tags = $5
       WHERE id = $6
       RETURNING *;`,
      [updatedPiece.title, updatedPiece.date, updatedPiece.image_url, updatedPiece.description, updatedPiece.tags, pieceId]
    );
    res.status(201).json(dbUpdate.rows[0]);
  } catch (err) {
    console.error(err);
    next(err);
  }
});
Unecessary piece:
updateFields.tags = tags.trim().split(/\s+/);

The patch attempt that still returns an aswer with JSON hashing:
apiRouter.patch('/:pieceId', requireAuth, async (req, res, next) => {
  const { pieceId } = req.params;
  console.log(req.body);
  try {
    // Fetch current piece information
    const currentPieceInfo = await getPieceById(pieceId);
    console.log(currentPieceInfo);
    const singlePiece = currentPieceInfo;
    if (!singlePiece) {
      return next({
        name: "PieceNotFoundError",
        message: "No piece found with that ID."
      });
    }
    // Destructure new values from req.body, falling back to existing values
    const {
      title = singlePiece.title,
      date = singlePiece.date,
      image_url = singlePiece.image_url,
      description = singlePiece.description,
      tags: newTags // new tags from request
    } = req.body;
    // Create updatedPiece based on the current piece
    let updatedPiece = { ...singlePiece };
    // Merge tags if new tags are provided
    if (newTags) {
      // Initialize an array for existing tags, whether stored as array or comma-separated string
      let existingTagsArray = [];
      if (singlePiece.tags) {
        if (Array.isArray(singlePiece.tags)) {
          existingTagsArray = singlePiece.tags;
        } else if (typeof singlePiece.tags === 'string') {
          existingTagsArray = singlePiece.tags.split(',').map(tag => tag.trim());
        }
      }
      // Convert new tags into an array
      let newTagsArray = [];
      if (typeof newTags === 'string') {
        newTagsArray = newTags.split(',').map(tag => tag.trim());
      } else if (Array.isArray(newTags)) {
        newTagsArray = newTags;
      }
      // Merge arrays and remove duplicates
      const mergedTags = Array.from(new Set([...existingTagsArray, ...newTagsArray]));
      // Set the merged tags as an array
      updatedPiece.tags = mergedTags;
    }
    // Update other fields from request, if provided
    updatedPiece.title = title;
    updatedPiece.date = date;
    updatedPiece.image_url = image_url;
    updatedPiece.description = description;
    // Update the database record with the merged data
    const dbUpdate = await client.query(
      `UPDATE pieces
       SET title = $1, date = $2, image_url = $3, description = $4, tags = $5
       WHERE id = $6
       RETURNING *;`,
      [updatedPiece.title, updatedPiece.date, updatedPiece.image_url, updatedPiece.description, updatedPiece.tags, pieceId]
    );
    res.status(201).json(dbUpdate.rows[0]);
    console.log(dbUpdate);
  } catch (err) {
    console.error(err);
    next(err);
  }
});

Removing pieces from the db/seed test: 
//Removing change tests
  console.log("Calling updateUser on users[0]");
    const updateUserResult = await updateUser(users[0].id, {
      name: "Newname Sogood",
      location: "Lesterville, KY",
    });
    console.log("Result:", updateUserResult);

    console.log("Calling updatePost on posts[0]");
    const updatePostResult = await updatePost(posts[0].id, {
      title: "New Title",
      content: "Updated Content",
    });
    console.log("Result:", updatePostResult);

    console.log("Calling updatePost on posts[1], only updating tags");
    const updatePostTagsResult = await updatePost(posts[1].id, {
      tags: ["#youcandoanything", "#redfish", "#bluefish"],
    });
    console.log("Result:", updatePostTagsResult);






The entire db/seed test original setup (for reference): 
// Function for testing all database connections:
async function testDB() {
  try {
    console.log("Starting to test database...");

    console.log("Calling getAllUsers");
    const users = await getAllUsers();
    console.log("Result:", users);

    console.log("Calling updateUser on users[0]");
    const updateUserResult = await updateUser(users[0].id, {
      name: "Newname Sogood",
      location: "Lesterville, KY",
    });
    console.log("Result:", updateUserResult);

    console.log("Calling getAllPosts");
    const posts = await getAllPosts();
    console.log("Result:", posts);

    console.log("Calling updatePost on posts[0]");
    const updatePostResult = await updatePost(posts[0].id, {
      title: "New Title",
      content: "Updated Content",
    });
    console.log("Result:", updatePostResult);

    console.log("Calling updatePost on posts[1], only updating tags");
    const updatePostTagsResult = await updatePost(posts[1].id, {
      tags: ["#youcandoanything", "#redfish", "#bluefish"],
    });
    console.log("Result:", updatePostTagsResult);

    console.log("Calling getUserById with 1");
    const albert = await getUserById(1);
    console.log("Result:", albert);

    console.log("Calling getAllTags");
    const allTags = await getAllTags();
    console.log("Result:", allTags);

    console.log("Calling getPostsByTagName with #happy");
    const postsWithHappy = await getPostsByTagName("#happy");
    console.log("Result:", postsWithHappy);

    console.log("Finished database tests!");
  } catch (error) {
    console.log("Error during testDB");
    throw error;
  }
}

// Promise methods for the database rebuild:
rebuildDB()
  .then(testDB)
  .catch(console.error)
  .finally(() => client.end());