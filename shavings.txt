A useful ternary I didn't need:
{/* {!token ? (
        <></>
      ) : (
        <div>
          <button onClick={handleDelete}> Delete </button>
          <button onClick={handleEdit}> Edit Art Piece</button>
        </div>
      )} */}

Default items for editing:
 title: originalPiece.title,
 date: originalPiece.date,
 image_url: originalPiece.image_url,
 description: originalPiece.description,
 tags: originalPiece.tags,

Another delete handler:
  // async function handleDelete() {
  //   await deletePlayer(piece.id);
  //   // location.reload();
  //   fetchPieces();
  // }

Getting Details Setup:
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getSingleBook } from "../api";

export default function BookDetails() {
  const [bookDetails, setBookDetails] = useState({});
  const { id } = useParams();
  const navigate = useNavigate();

  useEffect(() => {
    async function getBookDetails(id) {
      setBookDetails(await getSingleBook(id));
    }
    getBookDetails(id);
  }, []);

  return (
    <>
      <div className="single-card-view">
        <h3>{bookDetails.title}</h3>
        <h4> By: {bookDetails.author}</h4>
        <img src={bookDetails.coverimage} alt={bookDetails.title} />
        {bookDetails.available ? (
          <p className="available">Available to Borrow</p>
        ) : (
          <p className="checked-out">Checked Out</p>
        )}
        <h4> Description: </h4>
        <p>{bookDetails.description} </p>
        <button
          onClick={() => {
            navigate("/");
          }}
        >
          Close Description
        </button>
      </div>
    </>
  );
}


Only need this for the admin routes: 
//Token middleware:
require("dotenv").config();
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT || "shhh";

//This is a statement to make sure tags are attached to pieces when they're returned
//The Promise.all batches the calls necessary to make the map
 await Promise.all(pieceIds.map((piece) => getPieceById(piece.id)));


I don't think I need an admin registration function: 
// Admin registration
apiRouter.post("/api/auth/register", async (req, res, next) => {
  try {
    res.send(await createUser(req.body));
  } catch (ex) {
    next(ex);
  }
});
//Simpler Piece Grab: 
const getAllPieces = async () => {
  const SQL = `
    SELECT id 
    FROM pieces;
  `;

  const response = await client.query(SQL);
  return response.rows;
};

// Fetch Pieces by TagName (testDB function):
async function getPiecesByTagName(tagName) {
  try {
    const pieceIds = await client.query(
      `
      SELECT *
      FROM piece_tags
      WHERE "tagId"=(SELECT tags.id FROM tags WHERE tags.medium=$1);
    `,
      [tagName]
    );

    return pieceIds.rows;

  } catch (error) {
    throw error;
  }
}
--VS--

 try {
    const { rows: pieceIds } = await client.query(`
      SELECT *
      FROM piece_tags
      WHERE "tagId"=(SELECT tags.id FROM tags WHERE tags.medium=$1);
    `,
      [tagName]
    );

    // using getPieceById here allows you to grab the tags along with the piece info
    // the Promise.all batches the calls necessary to make the map
    const pieces = await Promise.all(
      pieceIds.map((piece) => getPieceById(piece.id))
    );

    return pieces;

  } catch (error) {
    throw error;
  }

Changing out how a piece is grabbed:
await client.query(
      `SELECT * FROM pieces WHERE id = $1;`,
      [pieceId]
    );

A more complex getAllAdmin request (there was no message so I didn't use it):
// apiRouter.get("/", async (req, res, next) => {
//   try {
//     const users = await getAllAdmins();

//     res.send({
//       admins,
//     });
//   } catch ({ name, message }) {
//     next({ name, message });
//   }
// });

WHERE "tagId" = (SELECT tags.id FROM tags WHERE tags.medium = $1)

A more complex Register request (I only have admins and I'll provide the info for grading):
apiRouter.post("/register", async (req, res, next) => {
  const { username, password, name, location } = req.body;

  try {
    const _user = await getUserByUsername(username);

    if (_user) {
      next({
        name: "UserExistsError",
        message: "A admin by that username already exists",
      });
    }

    const admin = await createUser({
      username,
      password,
      name,
      location,
    });

    const token = jwt.sign(
      {
        id: admin.id,
        username,
      },
      JWT_SECRET,
      {
        expiresIn: "1w",
      }
    );

    res.send({
      message: "thank you for signing up",
      token,
    });
  } catch ({ name, message }) {
    next({ name, message });
  }
});

Deleting unnecessary middleware:
[
// Middleware for printing information + errors:
apiRouter.use(require("morgan")("dev"));
// Importing findUserWithToken to build the admin requests:
const { findUserWithToken } = require("../db/db.js");

const requireUser = async (req, res, next) => {
  try {
    req.user = await findUserWithToken(req.headers.authorization);
    next();
  } catch (ex) {
    next(ex);
  }
};
//Information for deployment:
//Static route
const path = require("node:path");
apiRouter.use(express.static(path.join(__dirname, "../client/dist")));
//GET endpoint to render static HTML

apiRouter.get("/", (req, res) =>
  res.sendFile(path.join(__dirname, "../client/dist/index.html"))
);
]

Semi-Working Patch attempt:
apiRouter.patch('/:pieceId', requireAuth, async (req, res, next) => {
  const { pieceId } = req.params;
  console.log(req.body);
  try {
    // Fetch current piece information
    const currentPieceInfo = await client.query(
      `SELECT * FROM pieces WHERE id = $1;`,
      [pieceId]
    );
    
    const singlePiece = currentPieceInfo.rows[0];
    if (!singlePiece) {
      return next({
        name: "PieceNotFoundError",
        message: "No piece found with that ID."
      });
    }
    // Destructure new values from req.body, falling back to existing values
    const {
      title = singlePiece.title,
      date = singlePiece.date,
      image_url = singlePiece.image_url,
      description = singlePiece.description,
      tags: newTags // new tags from request
    } = req.body;
    // Create updatedPiece based on the current piece
    let updatedPiece = { ...singlePiece };
    // Merge tags if new tags are provided
    if (newTags) {
      // Initialize an array for existing tags, whether stored as array or comma-separated string
      let existingTagsArray = [];
      if (singlePiece.tags) {
        if (Array.isArray(singlePiece.tags)) {
          existingTagsArray = singlePiece.tags;
        } else if (typeof singlePiece.tags === 'string') {
          existingTagsArray = singlePiece.tags.split(',').map(tag => tag.trim());
        }
      }
      // Convert new tags into an array
      let newTagsArray = [];
      if (typeof newTags === 'string') {
        newTagsArray = newTags.split(',').map(tag => tag.trim());
      } else if (Array.isArray(newTags)) {
        newTagsArray = newTags;
      }
      // Merge arrays and remove duplicates
      const mergedTags = Array.from(new Set([...existingTagsArray, ...newTagsArray]));
      // Set the merged tags as an array
      updatedPiece.tags = mergedTags;
    }
    // Update other fields from request, if provided
    updatedPiece.title = title;
    updatedPiece.date = date;
    updatedPiece.image_url = image_url;
    updatedPiece.description = description;
    // Update the database record with the merged data
    const dbUpdate = await client.query(
      `UPDATE pieces
       SET title = $1, date = $2, image_url = $3, description = $4, tags = $5
       WHERE id = $6
       RETURNING *;`,
      [updatedPiece.title, updatedPiece.date, updatedPiece.image_url, updatedPiece.description, updatedPiece.tags, pieceId]
    );
    res.status(201).json(dbUpdate.rows[0]);
  } catch (err) {
    console.error(err);
    next(err);
  }
});
Unecessary piece:
updateFields.tags = tags.trim().split(/\s+/);

The patch attempt that still returns an aswer with JSON hashing:
apiRouter.patch('/:pieceId', requireAuth, async (req, res, next) => {
  const { pieceId } = req.params;
  console.log(req.body);
  try {
    // Fetch current piece information
    const currentPieceInfo = await getPieceById(pieceId);
    console.log(currentPieceInfo);
    const singlePiece = currentPieceInfo;
    if (!singlePiece) {
      return next({
        name: "PieceNotFoundError",
        message: "No piece found with that ID."
      });
    }
    // Destructure new values from req.body, falling back to existing values
    const {
      title = singlePiece.title,
      date = singlePiece.date,
      image_url = singlePiece.image_url,
      description = singlePiece.description,
      tags: newTags // new tags from request
    } = req.body;
    // Create updatedPiece based on the current piece
    let updatedPiece = { ...singlePiece };
    // Merge tags if new tags are provided
    if (newTags) {
      // Initialize an array for existing tags, whether stored as array or comma-separated string
      let existingTagsArray = [];
      if (singlePiece.tags) {
        if (Array.isArray(singlePiece.tags)) {
          existingTagsArray = singlePiece.tags;
        } else if (typeof singlePiece.tags === 'string') {
          existingTagsArray = singlePiece.tags.split(',').map(tag => tag.trim());
        }
      }
      // Convert new tags into an array
      let newTagsArray = [];
      if (typeof newTags === 'string') {
        newTagsArray = newTags.split(',').map(tag => tag.trim());
      } else if (Array.isArray(newTags)) {
        newTagsArray = newTags;
      }
      // Merge arrays and remove duplicates
      const mergedTags = Array.from(new Set([...existingTagsArray, ...newTagsArray]));
      // Set the merged tags as an array
      updatedPiece.tags = mergedTags;
    }
    // Update other fields from request, if provided
    updatedPiece.title = title;
    updatedPiece.date = date;
    updatedPiece.image_url = image_url;
    updatedPiece.description = description;
    // Update the database record with the merged data
    const dbUpdate = await client.query(
      `UPDATE pieces
       SET title = $1, date = $2, image_url = $3, description = $4, tags = $5
       WHERE id = $6
       RETURNING *;`,
      [updatedPiece.title, updatedPiece.date, updatedPiece.image_url, updatedPiece.description, updatedPiece.tags, pieceId]
    );
    res.status(201).json(dbUpdate.rows[0]);
    console.log(dbUpdate);
  } catch (err) {
    console.error(err);
    next(err);
  }
});

Removing pieces from the db/seed test: 
//Removing change tests
  console.log("Calling updateUser on users[0]");
    const updateUserResult = await updateUser(users[0].id, {
      name: "Newname Sogood",
      location: "Lesterville, KY",
    });
    console.log("Result:", updateUserResult);

    console.log("Calling updatePost on posts[0]");
    const updatePostResult = await updatePost(posts[0].id, {
      title: "New Title",
      content: "Updated Content",
    });
    console.log("Result:", updatePostResult);

    console.log("Calling updatePost on posts[1], only updating tags");
    const updatePostTagsResult = await updatePost(posts[1].id, {
      tags: ["#youcandoanything", "#redfish", "#bluefish"],
    });
    console.log("Result:", updatePostTagsResult);






The entire db/seed test original setup (for reference): 
// Function for testing all database connections:
async function testDB() {
  try {
    console.log("Starting to test database...");

    console.log("Calling getAllUsers");
    const users = await getAllUsers();
    console.log("Result:", users);

    console.log("Calling updateUser on users[0]");
    const updateUserResult = await updateUser(users[0].id, {
      name: "Newname Sogood",
      location: "Lesterville, KY",
    });
    console.log("Result:", updateUserResult);

    console.log("Calling getAllPosts");
    const posts = await getAllPosts();
    console.log("Result:", posts);

    console.log("Calling updatePost on posts[0]");
    const updatePostResult = await updatePost(posts[0].id, {
      title: "New Title",
      content: "Updated Content",
    });
    console.log("Result:", updatePostResult);

    console.log("Calling updatePost on posts[1], only updating tags");
    const updatePostTagsResult = await updatePost(posts[1].id, {
      tags: ["#youcandoanything", "#redfish", "#bluefish"],
    });
    console.log("Result:", updatePostTagsResult);

    console.log("Calling getUserById with 1");
    const albert = await getUserById(1);
    console.log("Result:", albert);

    console.log("Calling getAllTags");
    const allTags = await getAllTags();
    console.log("Result:", allTags);

    console.log("Calling getPostsByTagName with #happy");
    const postsWithHappy = await getPostsByTagName("#happy");
    console.log("Result:", postsWithHappy);

    console.log("Finished database tests!");
  } catch (error) {
    console.log("Error during testDB");
    throw error;
  }
}

// Promise methods for the database rebuild:
rebuildDB()
  .then(testDB)
  .catch(console.error)
  .finally(() => client.end());